// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// nth_element
double nth_element(const Rcpp::NumericVector& x, int n);
RcppExport SEXP _tumopp_nth_element(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nth_element(x, n));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tumopp
Rcpp::CharacterVector cpp_tumopp(const std::vector<std::string>& args);
RcppExport SEXP _tumopp_cpp_tumopp(SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tumopp(args));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tumopp_nth_element", (DL_FUNC) &_tumopp_nth_element, 2},
    {"_tumopp_cpp_tumopp", (DL_FUNC) &_tumopp_cpp_tumopp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tumopp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
